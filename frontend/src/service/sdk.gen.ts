// This file is auto-generated by @hey-api/openapi-ts

import { type Options as ClientOptions, type TDataShape, type Client, formDataBodySerializer } from './client';
import type { LoginData, LoginResponses, LoginErrors, RegisterData, RegisterResponses, RegisterErrors, DeleteUserData, DeleteUserResponses, GetUserData, GetUserResponses, UpdateUserData, UpdateUserResponses, UpdateUserErrors, RemoveAvatarData, RemoveAvatarResponses, UpdateAvatarData, UpdateAvatarResponses, UpdateAvatarErrors, RemoveCoverData, RemoveCoverResponses, UpdateCoverData, UpdateCoverResponses, UpdateCoverErrors, ValidateSlugData, ValidateSlugResponses, ValidateSlugErrors, DeleteSchedulingData, DeleteSchedulingResponses, DeleteSchedulingErrors, GetSchedulingData, GetSchedulingResponses, GetSchedulingErrors, CreateSchedulingData, CreateSchedulingResponses, CreateSchedulingErrors, UpdateSchedulingData, UpdateSchedulingResponses, UpdateSchedulingErrors, DeleteEventData, DeleteEventResponses, DeleteEventErrors, GetEventData, GetEventResponses, GetEventErrors, CreateEventData, CreateEventResponses, CreateEventErrors, UpdateEventData, UpdateEventResponses, UpdateEventErrors, GetEventPublicData, GetEventPublicResponses, GetEventPublicErrors, GetAvailsData, GetAvailsResponses, GetAvailsErrors, CreateAvailsData, CreateAvailsResponses, CreateAvailsErrors, ReadRootGetData, ReadRootGetResponses } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Login
 */
export const login = <ThrowOnError extends boolean = false>(options: Options<LoginData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<LoginResponses, LoginErrors, ThrowOnError>({
        url: '/auth/login',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Register
 */
export const register = <ThrowOnError extends boolean = false>(options: Options<RegisterData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RegisterResponses, RegisterErrors, ThrowOnError>({
        url: '/auth/register',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete User
 */
export const deleteUser = <ThrowOnError extends boolean = false>(options?: Options<DeleteUserData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<DeleteUserResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users',
        ...options
    });
};

/**
 * Get User
 */
export const getUser = <ThrowOnError extends boolean = false>(options?: Options<GetUserData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetUserResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users',
        ...options
    });
};

/**
 * Update User
 */
export const updateUser = <ThrowOnError extends boolean = false>(options: Options<UpdateUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateUserResponses, UpdateUserErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Remove Avatar
 */
export const removeAvatar = <ThrowOnError extends boolean = false>(options?: Options<RemoveAvatarData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<RemoveAvatarResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/avatar',
        ...options
    });
};

/**
 * Update Avatar
 */
export const updateAvatar = <ThrowOnError extends boolean = false>(options: Options<UpdateAvatarData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UpdateAvatarResponses, UpdateAvatarErrors, ThrowOnError>({
        ...formDataBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/avatar',
        ...options,
        headers: {
            'Content-Type': null,
            ...options.headers
        }
    });
};

/**
 * Remove Cover
 */
export const removeCover = <ThrowOnError extends boolean = false>(options?: Options<RemoveCoverData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<RemoveCoverResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/cover',
        ...options
    });
};

/**
 * Update Cover
 */
export const updateCover = <ThrowOnError extends boolean = false>(options: Options<UpdateCoverData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UpdateCoverResponses, UpdateCoverErrors, ThrowOnError>({
        ...formDataBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/cover',
        ...options,
        headers: {
            'Content-Type': null,
            ...options.headers
        }
    });
};

/**
 * Validate Slug
 */
export const validateSlug = <ThrowOnError extends boolean = false>(options?: Options<ValidateSlugData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ValidateSlugResponses, ValidateSlugErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/validate-slug',
        ...options
    });
};

/**
 * Delete Scheduling
 */
export const deleteScheduling = <ThrowOnError extends boolean = false>(options: Options<DeleteSchedulingData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteSchedulingResponses, DeleteSchedulingErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/scheduling',
        ...options
    });
};

/**
 * Get Scheduling
 */
export const getScheduling = <ThrowOnError extends boolean = false>(options?: Options<GetSchedulingData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetSchedulingResponses, GetSchedulingErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/scheduling',
        ...options
    });
};

/**
 * Create Scheduling
 */
export const createScheduling = <ThrowOnError extends boolean = false>(options: Options<CreateSchedulingData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateSchedulingResponses, CreateSchedulingErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/scheduling',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Update Scheduling
 */
export const updateScheduling = <ThrowOnError extends boolean = false>(options: Options<UpdateSchedulingData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateSchedulingResponses, UpdateSchedulingErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/scheduling',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete Event
 */
export const deleteEvent = <ThrowOnError extends boolean = false>(options: Options<DeleteEventData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteEventResponses, DeleteEventErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/events',
        ...options
    });
};

/**
 * Get Event
 */
export const getEvent = <ThrowOnError extends boolean = false>(options?: Options<GetEventData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetEventResponses, GetEventErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/events',
        ...options
    });
};

/**
 * Create Event
 */
export const createEvent = <ThrowOnError extends boolean = false>(options: Options<CreateEventData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateEventResponses, CreateEventErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/events',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Update Event
 */
export const updateEvent = <ThrowOnError extends boolean = false>(options: Options<UpdateEventData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateEventResponses, UpdateEventErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/events',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get Event Public
 */
export const getEventPublic = <ThrowOnError extends boolean = false>(options: Options<GetEventPublicData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetEventPublicResponses, GetEventPublicErrors, ThrowOnError>({
        url: '/events/{user_slug}/{event_slug}',
        ...options
    });
};

/**
 * Get Avails
 */
export const getAvails = <ThrowOnError extends boolean = false>(options?: Options<GetAvailsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAvailsResponses, GetAvailsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/avails',
        ...options
    });
};

/**
 * Create Avails
 */
export const createAvails = <ThrowOnError extends boolean = false>(options: Options<CreateAvailsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateAvailsResponses, CreateAvailsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/avails',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Read Root
 */
export const readRootGet = <ThrowOnError extends boolean = false>(options?: Options<ReadRootGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ReadRootGetResponses, unknown, ThrowOnError>({
        url: '/',
        ...options
    });
};