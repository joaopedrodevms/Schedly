// This file is auto-generated by @hey-api/openapi-ts

/**
 * Availability
 */
export type Availability = {
    /**
     * Week Day
     */
    week_day: number;
    /**
     * Start Time
     */
    start_time: string;
    /**
     * End Time
     */
    end_time: string;
};

/**
 * AvailsDto
 */
export type AvailsDto = {
    /**
     * Event Id
     */
    event_id: string;
    /**
     * Availability
     */
    availability: Array<Availability>;
};

/**
 * Body_update_avatar
 */
export type BodyUpdateAvatar = {
    /**
     * File
     */
    file: Blob | File;
};

/**
 * Body_update_cover
 */
export type BodyUpdateCover = {
    /**
     * File
     */
    file: Blob | File;
};

/**
 * EventAvailabilityDto
 */
export type EventAvailabilityDto = {
    /**
     * Week Day
     */
    week_day: number;
    /**
     * Start Time
     */
    start_time: string;
    /**
     * End Time
     */
    end_time: string;
};

/**
 * EventCreateRequestDto
 */
export type EventCreateRequestDto = {
    /**
     * User Id
     */
    user_id: string;
    /**
     * Title
     */
    title: string;
    /**
     * Description
     */
    description: string;
    /**
     * Slug
     */
    slug: string;
    /**
     * Buffer Before
     */
    buffer_before: number;
    /**
     * Buffer After
     */
    buffer_after: number;
    /**
     * Duration Minutes
     */
    duration_minutes: number;
    location_type: EventLocation;
};

/**
 * EventDto
 */
export type EventDto = {
    /**
     * Id
     */
    id: string;
    /**
     * User Id
     */
    user_id: string;
    /**
     * Title
     */
    title: string;
    /**
     * Description
     */
    description: string;
    /**
     * Slug
     */
    slug: string;
    /**
     * Buffer Before
     */
    buffer_before: number;
    /**
     * Buffer After
     */
    buffer_after: number;
    /**
     * Duration Minutes
     */
    duration_minutes: number;
    location_type: EventLocation;
    /**
     * Created At
     */
    created_at: string;
    /**
     * Updated At
     */
    updated_at?: string | null;
};

/**
 * EventLocation
 */
export type EventLocation = 'location_jitsi' | 'location_zoom' | 'location_meet' | 'location_in_person';

/**
 * EventStatus
 */
export type EventStatus = 'status_pending' | 'status_confirmed' | 'status_cancelled' | 'status_rescheduled';

/**
 * EventUnavailabilityDto
 */
export type EventUnavailabilityDto = {
    /**
     * Starts At
     */
    starts_at: string;
    /**
     * Ends At
     */
    ends_at: string;
};

/**
 * EventUpdateRequestDto
 */
export type EventUpdateRequestDto = {
    /**
     * Id
     */
    id: string;
    /**
     * Title
     */
    title?: string | null;
    /**
     * Description
     */
    description?: string | null;
    /**
     * Slug
     */
    slug?: string | null;
    /**
     * Buffer Before
     */
    buffer_before?: number | null;
    /**
     * Buffer After
     */
    buffer_after?: number | null;
    /**
     * Duration Minutes
     */
    duration_minutes?: number | null;
    location_type?: EventLocation | null;
};

/**
 * EventWithAvailabilityDto
 */
export type EventWithAvailabilityDto = {
    /**
     * Id
     */
    id: string;
    /**
     * Title
     */
    title: string;
    /**
     * Description
     */
    description: string;
    /**
     * Duration Minutes
     */
    duration_minutes: number;
    location_type: EventLocation;
    /**
     * Avails
     */
    avails: Array<EventAvailabilityDto>;
    /**
     * Not Available
     */
    not_available: Array<EventUnavailabilityDto>;
    user?: UserProfileDto | null;
};

/**
 * HTTPValidationError
 */
export type HttpValidationError = {
    /**
     * Detail
     */
    detail?: Array<ValidationError>;
};

/**
 * LoginRequestDto
 */
export type LoginRequestDto = {
    /**
     * Email
     */
    email: string;
    /**
     * Password
     */
    password: string;
};

/**
 * LoginResponseDto
 */
export type LoginResponseDto = {
    user: UserPublicDto;
    /**
     * Access Token
     */
    access_token: string;
    /**
     * Token Type
     */
    token_type?: string;
};

/**
 * RegisterRequestDto
 */
export type RegisterRequestDto = {
    /**
     * Name
     */
    name: string;
    /**
     * Email
     */
    email: string;
    /**
     * Password
     */
    password: string;
    /**
     * Slug
     */
    slug: string;
};

/**
 * RegisterResponseDto
 */
export type RegisterResponseDto = {
    user: UserPublicDto;
    /**
     * Access Token
     */
    access_token: string;
    /**
     * Token Type
     */
    token_type?: string;
};

/**
 * SchedulingCreateRequestDto
 */
export type SchedulingCreateRequestDto = {
    /**
     * Event Id
     */
    event_id: string;
    /**
     * Quest Name
     */
    quest_name: string;
    /**
     * Quest Email
     */
    quest_email: string;
    /**
     * Quest Message
     */
    quest_message: string;
    /**
     * Starts At
     */
    starts_at: string;
};

/**
 * SchedulingDto
 */
export type SchedulingDto = {
    /**
     * Id
     */
    id: string;
    event: EventDto;
    /**
     * Quest Name
     */
    quest_name: string;
    /**
     * Quest Email
     */
    quest_email: string;
    /**
     * Quest Message
     */
    quest_message: string;
    status: EventStatus;
    /**
     * Starts At
     */
    starts_at: string;
    /**
     * Ends At
     */
    ends_at: string;
    /**
     * Created At
     */
    created_at: string;
    /**
     * Updated At
     */
    updated_at?: string | null;
};

/**
 * SchedulingUpdateRequestDto
 */
export type SchedulingUpdateRequestDto = {
    /**
     * Id
     */
    id: string;
    /**
     * Quest Name
     */
    quest_name?: string | null;
    /**
     * Quest Email
     */
    quest_email?: string | null;
    /**
     * Quest Message
     */
    quest_message?: string | null;
    /**
     * Starts At
     */
    starts_at?: string | null;
    /**
     * Ends At
     */
    ends_at?: string | null;
};

/**
 * UserProfileDto
 */
export type UserProfileDto = {
    /**
     * Name
     */
    name: string;
    /**
     * Avatar Url
     */
    avatar_url: string;
    /**
     * Cover Url
     */
    cover_url: string;
};

/**
 * UserPublicDto
 */
export type UserPublicDto = {
    /**
     * Id
     */
    id: string;
    /**
     * Name
     */
    name: string;
    /**
     * Email
     */
    email: string;
    /**
     * Slug
     */
    slug: string;
    /**
     * Email Verified
     */
    email_verified: boolean;
    /**
     * Avatar Url
     */
    avatar_url: string;
    /**
     * Cover Url
     */
    cover_url: string;
    /**
     * Timezone
     */
    timezone: string;
    /**
     * Is Active
     */
    is_active: boolean;
    /**
     * Created At
     */
    created_at: string;
    /**
     * Updated At
     */
    updated_at?: string | null;
};

/**
 * UserUpdateRequestDto
 */
export type UserUpdateRequestDto = {
    /**
     * Name
     */
    name?: string | null;
    /**
     * Email
     */
    email?: string | null;
    /**
     * Slug
     */
    slug?: string | null;
    /**
     * Email Verified
     */
    email_verified?: boolean | null;
    /**
     * Avatar Url
     */
    avatar_url?: string | null;
    /**
     * Cover Url
     */
    cover_url?: string | null;
    /**
     * Timezone
     */
    timezone?: string | null;
};

/**
 * UserValidateSlugResponseDto
 */
export type UserValidateSlugResponseDto = {
    /**
     * Is Valid
     */
    is_valid: boolean;
    /**
     * Message
     */
    message: string;
};

/**
 * ValidationError
 */
export type ValidationError = {
    /**
     * Location
     */
    loc: Array<string | number>;
    /**
     * Message
     */
    msg: string;
    /**
     * Error Type
     */
    type: string;
};

export type LoginData = {
    body: LoginRequestDto;
    path?: never;
    query?: never;
    url: '/auth/login';
};

export type LoginErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type LoginError = LoginErrors[keyof LoginErrors];

export type LoginResponses = {
    /**
     * Successful Response
     */
    200: LoginResponseDto;
};

export type LoginResponse = LoginResponses[keyof LoginResponses];

export type RegisterData = {
    body: RegisterRequestDto;
    path?: never;
    query?: never;
    url: '/auth/register';
};

export type RegisterErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type RegisterError = RegisterErrors[keyof RegisterErrors];

export type RegisterResponses = {
    /**
     * Successful Response
     */
    200: RegisterResponseDto;
};

export type RegisterResponse = RegisterResponses[keyof RegisterResponses];

export type DeleteUserData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/users';
};

export type DeleteUserResponses = {
    /**
     * Successful Response
     */
    200: UserPublicDto;
};

export type DeleteUserResponse = DeleteUserResponses[keyof DeleteUserResponses];

export type GetUserData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/users';
};

export type GetUserResponses = {
    /**
     * Successful Response
     */
    200: UserPublicDto;
};

export type GetUserResponse = GetUserResponses[keyof GetUserResponses];

export type UpdateUserData = {
    body: UserUpdateRequestDto;
    path?: never;
    query?: never;
    url: '/users';
};

export type UpdateUserErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateUserError = UpdateUserErrors[keyof UpdateUserErrors];

export type UpdateUserResponses = {
    /**
     * Successful Response
     */
    200: UserPublicDto;
};

export type UpdateUserResponse = UpdateUserResponses[keyof UpdateUserResponses];

export type RemoveAvatarData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/users/avatar';
};

export type RemoveAvatarResponses = {
    /**
     * Successful Response
     */
    200: UserPublicDto;
};

export type RemoveAvatarResponse = RemoveAvatarResponses[keyof RemoveAvatarResponses];

export type UpdateAvatarData = {
    body: BodyUpdateAvatar;
    path?: never;
    query?: never;
    url: '/users/avatar';
};

export type UpdateAvatarErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateAvatarError = UpdateAvatarErrors[keyof UpdateAvatarErrors];

export type UpdateAvatarResponses = {
    /**
     * Successful Response
     */
    200: UserPublicDto;
};

export type UpdateAvatarResponse = UpdateAvatarResponses[keyof UpdateAvatarResponses];

export type RemoveCoverData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/users/cover';
};

export type RemoveCoverResponses = {
    /**
     * Successful Response
     */
    200: UserPublicDto;
};

export type RemoveCoverResponse = RemoveCoverResponses[keyof RemoveCoverResponses];

export type UpdateCoverData = {
    body: BodyUpdateCover;
    path?: never;
    query?: never;
    url: '/users/cover';
};

export type UpdateCoverErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateCoverError = UpdateCoverErrors[keyof UpdateCoverErrors];

export type UpdateCoverResponses = {
    /**
     * Successful Response
     */
    200: UserPublicDto;
};

export type UpdateCoverResponse = UpdateCoverResponses[keyof UpdateCoverResponses];

export type ValidateSlugData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Slug
         */
        slug?: string;
    };
    url: '/users/validate-slug';
};

export type ValidateSlugErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ValidateSlugError = ValidateSlugErrors[keyof ValidateSlugErrors];

export type ValidateSlugResponses = {
    /**
     * Successful Response
     */
    200: UserValidateSlugResponseDto;
};

export type ValidateSlugResponse = ValidateSlugResponses[keyof ValidateSlugResponses];

export type DeleteSchedulingData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Scheduling Id
         */
        scheduling_id: string;
    };
    url: '/scheduling';
};

export type DeleteSchedulingErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteSchedulingError = DeleteSchedulingErrors[keyof DeleteSchedulingErrors];

export type DeleteSchedulingResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetSchedulingData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Scheduling Id
         */
        scheduling_id?: string;
    };
    url: '/scheduling';
};

export type GetSchedulingErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetSchedulingError = GetSchedulingErrors[keyof GetSchedulingErrors];

export type GetSchedulingResponses = {
    /**
     * Response Get Scheduling
     * Successful Response
     */
    200: Array<SchedulingDto>;
};

export type GetSchedulingResponse = GetSchedulingResponses[keyof GetSchedulingResponses];

export type CreateSchedulingData = {
    body: SchedulingCreateRequestDto;
    path?: never;
    query?: never;
    url: '/scheduling';
};

export type CreateSchedulingErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateSchedulingError = CreateSchedulingErrors[keyof CreateSchedulingErrors];

export type CreateSchedulingResponses = {
    /**
     * Successful Response
     */
    200: SchedulingDto;
};

export type CreateSchedulingResponse = CreateSchedulingResponses[keyof CreateSchedulingResponses];

export type UpdateSchedulingData = {
    body: SchedulingUpdateRequestDto;
    path?: never;
    query?: never;
    url: '/scheduling';
};

export type UpdateSchedulingErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateSchedulingError = UpdateSchedulingErrors[keyof UpdateSchedulingErrors];

export type UpdateSchedulingResponses = {
    /**
     * Successful Response
     */
    200: SchedulingDto;
};

export type UpdateSchedulingResponse = UpdateSchedulingResponses[keyof UpdateSchedulingResponses];

export type DeleteEventData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Event Id
         */
        event_id: string;
    };
    url: '/events';
};

export type DeleteEventErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteEventError = DeleteEventErrors[keyof DeleteEventErrors];

export type DeleteEventResponses = {
    /**
     * Successful Response
     */
    200: EventDto;
};

export type DeleteEventResponse = DeleteEventResponses[keyof DeleteEventResponses];

export type GetEventData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Event Id
         */
        event_id?: string;
    };
    url: '/events';
};

export type GetEventErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetEventError = GetEventErrors[keyof GetEventErrors];

export type GetEventResponses = {
    /**
     * Response Get Event
     * Successful Response
     */
    200: Array<EventDto>;
};

export type GetEventResponse = GetEventResponses[keyof GetEventResponses];

export type CreateEventData = {
    body: EventCreateRequestDto;
    path?: never;
    query?: never;
    url: '/events';
};

export type CreateEventErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateEventError = CreateEventErrors[keyof CreateEventErrors];

export type CreateEventResponses = {
    /**
     * Successful Response
     */
    200: EventDto;
};

export type CreateEventResponse = CreateEventResponses[keyof CreateEventResponses];

export type UpdateEventData = {
    body: EventUpdateRequestDto;
    path?: never;
    query?: never;
    url: '/events';
};

export type UpdateEventErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateEventError = UpdateEventErrors[keyof UpdateEventErrors];

export type UpdateEventResponses = {
    /**
     * Successful Response
     */
    200: EventDto;
};

export type UpdateEventResponse = UpdateEventResponses[keyof UpdateEventResponses];

export type GetEventPublicData = {
    body?: never;
    path: {
        /**
         * User Slug
         */
        user_slug: string;
        /**
         * Event Slug
         */
        event_slug: string;
    };
    query?: never;
    url: '/events/{user_slug}/{event_slug}';
};

export type GetEventPublicErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetEventPublicError = GetEventPublicErrors[keyof GetEventPublicErrors];

export type GetEventPublicResponses = {
    /**
     * Successful Response
     */
    200: EventWithAvailabilityDto;
};

export type GetEventPublicResponse = GetEventPublicResponses[keyof GetEventPublicResponses];

export type GetAvailsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Event Id
         */
        event_id?: string;
    };
    url: '/avails';
};

export type GetAvailsErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetAvailsError = GetAvailsErrors[keyof GetAvailsErrors];

export type GetAvailsResponses = {
    /**
     * Successful Response
     */
    200: AvailsDto;
};

export type GetAvailsResponse = GetAvailsResponses[keyof GetAvailsResponses];

export type CreateAvailsData = {
    body: AvailsDto;
    path?: never;
    query?: never;
    url: '/avails';
};

export type CreateAvailsErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateAvailsError = CreateAvailsErrors[keyof CreateAvailsErrors];

export type CreateAvailsResponses = {
    /**
     * Successful Response
     */
    200: AvailsDto;
};

export type CreateAvailsResponse = CreateAvailsResponses[keyof CreateAvailsResponses];

export type ReadRootGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/';
};

export type ReadRootGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type ClientOptions = {
    baseUrl: 'http://localhost:8000' | (string & {});
};